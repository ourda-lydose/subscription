package id.ac.ui.cs.advprog.subscription.controller;import id.ac.ui.cs.advprog.subscription.domains.entities.Subscription;import id.ac.ui.cs.advprog.subscription.domains.models.SubscriptionData;import id.ac.ui.cs.advprog.subscription.domains.models.responses.ResponseData;import id.ac.ui.cs.advprog.subscription.service.interfaces.SubscriptionService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.logging.Level;import java.util.logging.Logger;@RestController@RequestMapping("/api/subscription")public class SubscriptionController {    @Autowired    private SubscriptionService subscriptionService;    private static final Logger logger = Logger.getLogger(SubscriptionService.class.getName());    public SubscriptionController() {        // Set logging level to INFO        logger.setLevel(Level.INFO);    }    @GetMapping("/subscriptions")    public ResponseEntity<List<Subscription>> getSubscriptions() {        return subscriptionService.getSubscriptions();    }    @GetMapping("/subscriptions/{subscription_status}")    public ResponseEntity<List<Subscription>> getSubscriptionByStatus(@PathVariable String subscription_status) {        return subscriptionService.getSubscriptionsByStatus(subscription_status);    }    @GetMapping("/{subscription_id}")    public ResponseEntity<Subscription> getSubscriptionById(@PathVariable String subscription_id) {        return subscriptionService.getSubscriptionById(subscription_id);    }    @PostMapping("/create")    public ResponseEntity<?> createSubscription(@RequestBody SubscriptionData subscriptionData) {        return subscriptionService.createSubscription(subscriptionData);    }    @PutMapping("/update/{subscription_id}")    public ResponseEntity<ResponseData<Subscription>> updateSubscription(@PathVariable String subscription_id, @RequestBody SubscriptionData subscriptionData) {        return subscriptionService.updateSubscription(subscription_id, subscriptionData);    }    @DeleteMapping("/delete/{subscriptionId}")    public ResponseEntity<?> deleteSubscription(@PathVariable String subscriptionId) {        return subscriptionService.deleteSubscriptionById(subscriptionId);    }    @PutMapping("/cancel-subscription/{subscription_id}")    public ResponseEntity<Subscription> cancelSubscriptionStatus(@PathVariable String subscription_id){        return subscriptionService.cancelSubscriptionById(subscription_id);    }    @GetMapping("/update-status")    public void updateSubscriptionStatus(){        subscriptionService.updateSubscriptionStatus();    }}