package id.ac.ui.cs.advprog.subscription.controller;import id.ac.ui.cs.advprog.subscription.domains.entities.Subscription;import id.ac.ui.cs.advprog.subscription.domains.models.SubscriptionData;import id.ac.ui.cs.advprog.subscription.domains.models.responses.ResponseData;import id.ac.ui.cs.advprog.subscription.service.interfaces.SubscriptionService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.concurrent.CompletableFuture;import java.util.logging.Level;import java.util.logging.Logger;@RestController@RequestMapping("/api/subscription")public class SubscriptionController {    @Autowired    private SubscriptionService subscriptionService;    private static final Logger logger = Logger.getLogger(SubscriptionService.class.getName());    public SubscriptionController() {        // Set logging level to INFO        logger.setLevel(Level.INFO);    }    @GetMapping("")    public CompletableFuture<ResponseEntity<List<Subscription>>> getSubscriptions() {        return CompletableFuture.supplyAsync(() -> subscriptionService.getSubscriptions());    }    @GetMapping("/{subscription_id}")    public CompletableFuture<ResponseEntity<Subscription>> getSubscriptionById(@PathVariable String subscription_id) {        return CompletableFuture.supplyAsync(() -> subscriptionService.getSubscriptionById(subscription_id));    }    @PostMapping("")    public CompletableFuture<ResponseEntity<?>> createSubscription(@RequestBody SubscriptionData subscriptionData) {        return CompletableFuture.supplyAsync(() -> subscriptionService.createSubscription(subscriptionData));    }    @PutMapping("/{subscription_id}")    public CompletableFuture<ResponseEntity<ResponseData<Subscription>>> updateSubscription(@PathVariable String subscription_id, @RequestBody SubscriptionData subscriptionData) {        return CompletableFuture.supplyAsync(() -> subscriptionService.updateSubscription(subscription_id, subscriptionData));    }    @DeleteMapping("/{subscriptionId}")    public CompletableFuture<ResponseEntity<?>> deleteSubscription(@PathVariable String subscriptionId) {        return CompletableFuture.supplyAsync(() -> subscriptionService.deleteSubscriptionById(subscriptionId));    }    @PutMapping("/cancel-subscription/{subscription_id}")    public CompletableFuture<ResponseEntity<Subscription>> cancelSubscriptionStatus(@PathVariable String subscription_id){        return CompletableFuture.supplyAsync(() -> subscriptionService.cancelSubscriptionById(subscription_id));    }    @GetMapping("/subscription-history")    public CompletableFuture<ResponseEntity<List<Subscription>>> getSubscriptionHistory(@RequestParam(required = false) String statusString){        return CompletableFuture.supplyAsync(() -> subscriptionService.getSubscriptionHistory(statusString));    }}